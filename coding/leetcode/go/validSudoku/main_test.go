package validSudoku

import "testing"

//var test []struct{
//	board [][]int
//	want bool
//} {
//
//}

var test = []struct {
	board [][]byte
	want  bool
}{
	//{
	//	[][]byte{
	//		{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
	//		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	//		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	//		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	//		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	//		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	//		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	//		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	//		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	//	},
	//	false,
	//},
	//{
	//	[][]byte{
	//		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
	//		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
	//		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
	//		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
	//		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
	//		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
	//		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
	//		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
	//		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	//	},
	//	true,
	//},
	{
		[][]byte{
			{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
			{'.', '4', '.', '3', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '3', '.', '.', '1'},
			{'8', '.', '.', '.', '.', '.', '.', '2', '.'},
			{'.', '.', '2', '.', '7', '.', '.', '.', '.'},
			{'.', '1', '5', '.', '.', '.', '.', '.', '.'},
			{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
			{'.', '2', '.', '9', '.', '.', '.', '.', '.'},
			{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
		},
		false,
	},
}

//func TestIsValidSudoku(t *testing.T) {
//	for _, tt := range test {
//		result := isValidSudoku(tt.board)
//		if result != tt.want {
//			t.Errorf("Want: %t, got: %t\n", tt.want, result)
//		}
//	}
//}

func TestIsValidSudoku2(t *testing.T) {
	for _, tt := range test {
		result := isValidSudoku2(tt.board)
		if result != tt.want {
			t.Errorf("Want: %t, got: %t\n", tt.want, result)
		}
	}
}
